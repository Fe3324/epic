# Script para demonstrar autentica√ß√£o JWT na aplica√ß√£o Epic
# Demonstra: Login, Acesso a endpoints protegidos, Renova√ß√£o de token, Logout

Write-Host "üîê === DEMONSTRA√á√ÉO COMPLETA DE AUTENTICA√á√ÉO JWT ===" -ForegroundColor Green
Write-Host ""

$baseUrl = "http://localhost:8080"

# 1. REGISTRO DE USU√ÅRIO ADMIN
Write-Host "üëë 1. REGISTRANDO USU√ÅRIO ADMIN..." -ForegroundColor Yellow
try {
    $registerBody = @{
        username = "demoadmin"
        email = "demo@admin.com"
        password = "admin123"
        confirmPassword = "admin123"
        firstName = "Demo"
        lastName = "Admin"
    } | ConvertTo-Json

    $registerResponse = Invoke-RestMethod -Uri "$baseUrl/auth/register-first-admin" -Method POST -ContentType 'application/json' -Body $registerBody
    Write-Host "‚úÖ Admin registrado com sucesso!" -ForegroundColor Green
    Write-Host "Username: $($registerResponse.data.user.username)" -ForegroundColor White
    Write-Host "Roles: $($registerResponse.data.user.roles | ForEach-Object { $_.name } | Join-String -Separator ', ')" -ForegroundColor White
} catch {
    Write-Host "‚ö†Ô∏è Admin pode j√° existir, tentando fazer login..." -ForegroundColor Yellow
}

Write-Host ""

# 2. LOGIN E OBTEN√á√ÉO DE TOKENS
Write-Host "üîê 2. FAZENDO LOGIN..." -ForegroundColor Yellow
try {
    $loginBody = @{
        username = "demoadmin"
        password = "admin123"
    } | ConvertTo-Json

    $loginResponse = Invoke-RestMethod -Uri "$baseUrl/auth/login" -Method POST -ContentType 'application/json' -Body $loginBody
    
    Write-Host "‚úÖ Login realizado com sucesso!" -ForegroundColor Green
    Write-Host "Access Token: $($loginResponse.data.accessToken.Substring(0,50))..." -ForegroundColor Cyan
    Write-Host "Refresh Token: $($loginResponse.data.refreshToken.Substring(0,50))..." -ForegroundColor Cyan
    Write-Host "Expira em: $($loginResponse.data.expiresIn) segundos" -ForegroundColor White
    Write-Host "Usu√°rio: $($loginResponse.data.user.username)" -ForegroundColor White
    
    # Salvar tokens
    $accessToken = $loginResponse.data.accessToken
    $refreshToken = $loginResponse.data.refreshToken
    $headers = @{Authorization = "Bearer $accessToken"}
    
} catch {
    Write-Host "‚ùå ERRO no login: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""

# 3. VALIDA√á√ÉO DE TOKEN
Write-Host "üîç 3. VALIDANDO TOKEN..." -ForegroundColor Yellow
try {
    $validationResponse = Invoke-RestMethod -Uri "$baseUrl/auth/validate" -Headers $headers
    Write-Host "‚úÖ Token √© v√°lido: $($validationResponse.data)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Token inv√°lido!" -ForegroundColor Red
}

Write-Host ""

# 4. ACESSANDO DADOS DO USU√ÅRIO ATUAL
Write-Host "üë§ 4. OBTENDO DADOS DO USU√ÅRIO ATUAL..." -ForegroundColor Yellow
try {
    $meResponse = Invoke-RestMethod -Uri "$baseUrl/auth/me" -Headers $headers
    Write-Host "‚úÖ Dados do usu√°rio:" -ForegroundColor Green
    Write-Host "ID: $($meResponse.data.id)" -ForegroundColor White
    Write-Host "Username: $($meResponse.data.username)" -ForegroundColor White
    Write-Host "Email: $($meResponse.data.email)" -ForegroundColor White
    Write-Host "Nome: $($meResponse.data.fullName)" -ForegroundColor White
    Write-Host "Roles: $($meResponse.data.roles | ForEach-Object { $_.name } | Join-String -Separator ', ')" -ForegroundColor White
} catch {
    Write-Host "‚ùå Erro ao obter dados do usu√°rio!" -ForegroundColor Red
}

Write-Host ""

# 5. TESTANDO ENDPOINTS PROTEGIDOS
Write-Host "üîí 5. TESTANDO ENDPOINTS PROTEGIDOS..." -ForegroundColor Yellow

# 5.1 - Endpoint para usu√°rios autenticados
Write-Host "   5.1. Acessando /api/users (autenticado)..." -ForegroundColor Cyan
try {
    $usersResponse = Invoke-RestMethod -Uri "$baseUrl/api/users" -Headers $headers
    Write-Host "   ‚úÖ Acesso autorizado! Total de usu√°rios: $($usersResponse.data.totalElements)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Acesso negado!" -ForegroundColor Red
}

# 5.2 - Endpoint apenas para ADMINs
Write-Host "   5.2. Acessando /api/roles (apenas ADMIN)..." -ForegroundColor Cyan
try {
    $rolesResponse = Invoke-RestMethod -Uri "$baseUrl/api/roles" -Headers $headers
    Write-Host "   ‚úÖ Acesso ADMIN autorizado! Total de roles: $($rolesResponse.data.totalElements)" -ForegroundColor Green
    Write-Host "   Roles dispon√≠veis: $($rolesResponse.data.content | ForEach-Object { $_.name } | Join-String -Separator ', ')" -ForegroundColor White
} catch {
    Write-Host "   ‚ùå Acesso ADMIN negado!" -ForegroundColor Red
}

Write-Host ""

# 6. TESTANDO RENOVA√á√ÉO DE TOKEN
Write-Host "üîÑ 6. TESTANDO RENOVA√á√ÉO DE TOKEN..." -ForegroundColor Yellow
try {
    $refreshBody = @{
        refreshToken = $refreshToken
    } | ConvertTo-Json

    $refreshResponse = Invoke-RestMethod -Uri "$baseUrl/auth/refresh" -Method POST -ContentType 'application/json' -Body $refreshBody -Headers $headers
    
    Write-Host "‚úÖ Token renovado com sucesso!" -ForegroundColor Green
    Write-Host "Novo Access Token: $($refreshResponse.data.accessToken.Substring(0,50))..." -ForegroundColor Cyan
    Write-Host "Novo Refresh Token: $($refreshResponse.data.refreshToken.Substring(0,50))..." -ForegroundColor Cyan
    
    # Atualizar tokens
    $accessToken = $refreshResponse.data.accessToken
    $refreshToken = $refreshResponse.data.refreshToken
    $headers = @{Authorization = "Bearer $accessToken"}
    
} catch {
    Write-Host "‚ùå Erro na renova√ß√£o do token!" -ForegroundColor Red
}

Write-Host ""

# 7. TESTANDO ENDPOINT ADMINISTRATIVO
Write-Host "üëë 7. TESTANDO ENDPOINT ADMINISTRATIVO..." -ForegroundColor Yellow
try {
    $adminResponse = Invoke-RestMethod -Uri "$baseUrl/admin/promote-user/1" -Method POST -Headers $headers
    Write-Host "‚úÖ Endpoint administrativo acess√≠vel!" -ForegroundColor Green
} catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Write-Host "‚ö†Ô∏è Usu√°rio ID 1 n√£o encontrado (normal)" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Erro no endpoint administrativo!" -ForegroundColor Red
    }
}

Write-Host ""

# 8. TESTANDO LOGOUT
Write-Host "üö™ 8. FAZENDO LOGOUT..." -ForegroundColor Yellow
try {
    $logoutResponse = Invoke-RestMethod -Uri "$baseUrl/auth/logout" -Method POST -Headers $headers
    Write-Host "‚úÖ Logout realizado com sucesso!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro no logout!" -ForegroundColor Red
}

Write-Host ""

# 9. TESTANDO ACESSO AP√ìS LOGOUT
Write-Host "üîí 9. TESTANDO ACESSO AP√ìS LOGOUT..." -ForegroundColor Yellow
try {
    $testAfterLogout = Invoke-RestMethod -Uri "$baseUrl/auth/me" -Headers $headers
    Write-Host "‚ö†Ô∏è Token ainda v√°lido (logout n√£o implementa blacklist)" -ForegroundColor Yellow
} catch {
    Write-Host "‚úÖ Acesso negado ap√≥s logout!" -ForegroundColor Green
}

Write-Host ""

# 10. TESTANDO ACESSO SEM TOKEN
Write-Host "üö´ 10. TESTANDO ACESSO SEM TOKEN..." -ForegroundColor Yellow
try {
    $noTokenResponse = Invoke-RestMethod -Uri "$baseUrl/api/users"
    Write-Host "‚ùå Acesso deveria ser negado!" -ForegroundColor Red
} catch {
    Write-Host "‚úÖ Acesso corretamente negado sem token!" -ForegroundColor Green
}

Write-Host ""
Write-Host "üéâ === DEMONSTRA√á√ÉO COMPLETA ===" -ForegroundColor Green
Write-Host ""
Write-Host "üìã RESUMO DO QUE FOI TESTADO:" -ForegroundColor Yellow
Write-Host "‚úÖ Registro de usu√°rio admin" -ForegroundColor Green
Write-Host "‚úÖ Login e obten√ß√£o de tokens JWT" -ForegroundColor Green
Write-Host "‚úÖ Valida√ß√£o de token" -ForegroundColor Green
Write-Host "‚úÖ Acesso a dados do usu√°rio autenticado" -ForegroundColor Green
Write-Host "‚úÖ Endpoints protegidos por autentica√ß√£o" -ForegroundColor Green
Write-Host "‚úÖ Endpoints protegidos por role ADMIN" -ForegroundColor Green
Write-Host "‚úÖ Renova√ß√£o de token" -ForegroundColor Green
Write-Host "‚úÖ Logout de usu√°rio" -ForegroundColor Green
Write-Host "‚úÖ Prote√ß√£o contra acesso sem token" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ A autentica√ß√£o JWT est√° funcionando perfeitamente!" -ForegroundColor Green

# Salvar tokens para uso posterior
Write-Host ""
Write-Host "üíæ TOKENS SALVOS PARA USO POSTERIOR:" -ForegroundColor Yellow
Write-Host "Access Token: $accessToken" -ForegroundColor Gray
Write-Host "Refresh Token: $refreshToken" -ForegroundColor Gray
Write-Host ""
Write-Host "üîß COMANDOS √öTEIS:" -ForegroundColor Yellow
Write-Host "`$headers = @{Authorization = 'Bearer $accessToken'}" -ForegroundColor Gray
Write-Host "Invoke-RestMethod -Uri 'http://localhost:8080/api/users' -Headers `$headers" -ForegroundColor Gray 